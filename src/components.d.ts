/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
export namespace Components {
    interface MxFieldset {
        "fieldsetId": string;
        "name": string;
    }
    interface MxForm {
        "name": string;
    }
    interface MxInput {
        "disabled": boolean;
        "inputClass": string;
        "label": string;
        "maxLength": number;
        "mxInputId": string;
        "placeholder": string;
        "required": boolean;
        "type": string;
        "value": string;
    }
    interface MxRow {
    }
}
export interface MxInputCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLMxInputElement;
}
declare global {
    interface HTMLMxFieldsetElement extends Components.MxFieldset, HTMLStencilElement {
    }
    var HTMLMxFieldsetElement: {
        prototype: HTMLMxFieldsetElement;
        new (): HTMLMxFieldsetElement;
    };
    interface HTMLMxFormElement extends Components.MxForm, HTMLStencilElement {
    }
    var HTMLMxFormElement: {
        prototype: HTMLMxFormElement;
        new (): HTMLMxFormElement;
    };
    interface HTMLMxInputElementEventMap {
        "mxInput": InputEvent;
        "mxFocus": FocusEvent;
        "mxClick": MouseEvent;
        "mxBlur": FocusEvent;
    }
    interface HTMLMxInputElement extends Components.MxInput, HTMLStencilElement {
        addEventListener<K extends keyof HTMLMxInputElementEventMap>(type: K, listener: (this: HTMLMxInputElement, ev: MxInputCustomEvent<HTMLMxInputElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLMxInputElementEventMap>(type: K, listener: (this: HTMLMxInputElement, ev: MxInputCustomEvent<HTMLMxInputElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLMxInputElement: {
        prototype: HTMLMxInputElement;
        new (): HTMLMxInputElement;
    };
    interface HTMLMxRowElement extends Components.MxRow, HTMLStencilElement {
    }
    var HTMLMxRowElement: {
        prototype: HTMLMxRowElement;
        new (): HTMLMxRowElement;
    };
    interface HTMLElementTagNameMap {
        "mx-fieldset": HTMLMxFieldsetElement;
        "mx-form": HTMLMxFormElement;
        "mx-input": HTMLMxInputElement;
        "mx-row": HTMLMxRowElement;
    }
}
declare namespace LocalJSX {
    interface MxFieldset {
        "fieldsetId"?: string;
        "name"?: string;
    }
    interface MxForm {
        "name"?: string;
    }
    interface MxInput {
        "disabled"?: boolean;
        "inputClass"?: string;
        "label"?: string;
        "maxLength"?: number;
        "mxInputId"?: string;
        "onMxBlur"?: (event: MxInputCustomEvent<FocusEvent>) => void;
        "onMxClick"?: (event: MxInputCustomEvent<MouseEvent>) => void;
        "onMxFocus"?: (event: MxInputCustomEvent<FocusEvent>) => void;
        "onMxInput"?: (event: MxInputCustomEvent<InputEvent>) => void;
        "placeholder"?: string;
        "required"?: boolean;
        "type"?: string;
        "value"?: string;
    }
    interface MxRow {
    }
    interface IntrinsicElements {
        "mx-fieldset": MxFieldset;
        "mx-form": MxForm;
        "mx-input": MxInput;
        "mx-row": MxRow;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "mx-fieldset": LocalJSX.MxFieldset & JSXBase.HTMLAttributes<HTMLMxFieldsetElement>;
            "mx-form": LocalJSX.MxForm & JSXBase.HTMLAttributes<HTMLMxFormElement>;
            "mx-input": LocalJSX.MxInput & JSXBase.HTMLAttributes<HTMLMxInputElement>;
            "mx-row": LocalJSX.MxRow & JSXBase.HTMLAttributes<HTMLMxRowElement>;
        }
    }
}
